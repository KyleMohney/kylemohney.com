<!DOCTYPE html>
<html lang='en'>
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<title>Kyle J. Mohney - Resume | Product Documentation &amp; Knowledge Operations Specialist</title>
<meta content="Kyle Mohney's professional resume - Enterprise Sp..., AI automation, and knowledge management." name="description"/>
<style>
        /* ==============================
         * KYLE MOHNEY RESUME STYLES
         * ==============================
         */
        
        * {
            box-sizing: border-box;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        :root {
            --primary: #1f2937; /* slate-800 */
            --accent: #14b8a6;  /* teal-500 */
            --muted: #6b7280;  /* gray-500 */
            --bg: #0b0b0f;     /* deep slate */
            --card: #111827;   /* slate-900 */
            --border: #374151; /* slate-700 */
            --text: #e5e7eb;   /* gray-200 */
            --link: #93c5fd;   /* blue-300 */
            --highlight: #22d3ee; /* cyan-400 */
            --shadow: rgba(0,0,0,0.24);
        }

        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
            font-family: 'Inter', system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
            background: 
                /* Deep space base */
                radial-gradient(ellipse at 20% 10%, rgba(75, 0, 130, 0.6) 0%, transparent 50%),
                radial-gradient(ellipse at 80% 20%, rgba(25, 25, 112, 0.5) 0%, transparent 45%),
                radial-gradient(ellipse at 40% 70%, rgba(139, 69, 19, 0.4) 0%, transparent 40%),
                radial-gradient(ellipse at 90% 80%, rgba(128, 0, 128, 0.5) 0%, transparent 55%),
                radial-gradient(ellipse at 10% 90%, rgba(0, 0, 128, 0.4) 0%, transparent 60%),
                /* SPROUT YELLOW gas cloud - PULLED BACK FOR BALANCE */
                radial-gradient(ellipse at 12% 40%, rgba(255, 215, 0, 0.50) 0%, rgba(255, 255, 0, 0.35) 30%, rgba(255, 223, 0, 0.25) 50%, rgba(255, 215, 0, 0.15) 70%, transparent 85%),
                /* CENTER RIFT - WIDE GASEOUS VOID */
                radial-gradient(ellipse 400px 100vh at 50% 0%, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.9) 30%, rgba(0,0,0,0.85) 50%, rgba(0,0,0,0.9) 70%, rgba(0,0,0,0.7) 100%),
                radial-gradient(ellipse 350px 100vh at 50% 50%, rgba(0,0,0,0.6) 0%, rgba(0,0,0,0.8) 40%, rgba(0,0,0,0.6) 100%),
                /* Bright nebula cores - AVOIDING CENTER */
                radial-gradient(ellipse at 70% 30%, rgba(255, 20, 147, 0.3) 0%, rgba(138, 43, 226, 0.2) 30%, transparent 70%),
                radial-gradient(ellipse at 25% 60%, rgba(30, 144, 255, 0.25) 0%, rgba(65, 105, 225, 0.15) 25%, transparent 65%),
                radial-gradient(ellipse at 85% 75%, rgba(255, 69, 0, 0.2) 0%, rgba(255, 140, 0, 0.1) 35%, transparent 75%),
                /* Final deep space backdrop */
                linear-gradient(135deg, #0a0a0f 0%, #1a0f1a 25%, #0f0a1a 50%, #1a1a0f 75%, #0a0a0f 100%);
            color: var(--text);
            position: relative;
            overflow-x: hidden;
        }

        /* Nebula dust clouds overlay */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: 
                /* CENTER RIFT REINFORCEMENT - GASEOUS WAVES */
                radial-gradient(ellipse 320px 100vh at 48% 25%, rgba(0,0,0,0.5) 0%, rgba(0,0,0,0.7) 50%, rgba(0,0,0,0.5) 100%),
                radial-gradient(ellipse 380px 100vh at 52% 75%, rgba(0,0,0,0.4) 0%, rgba(0,0,0,0.6) 60%, rgba(0,0,0,0.4) 100%),
                radial-gradient(ellipse 250px 100vh at 50% 10%, rgba(0,0,0,0.3) 0%, rgba(0,0,0,0.5) 90%, rgba(0,0,0,0.3) 100%),
                /* GOLDEN SPROUT dust streams - REDUCED INTENSITY */
                radial-gradient(ellipse 600px 350px at 12% 35%, rgba(255, 215, 0, 0.25) 0%, rgba(255, 255, 0, 0.18) 40%, rgba(255, 223, 0, 0.12) 60%, rgba(255, 215, 0, 0.08) 80%, transparent 90%),
                radial-gradient(ellipse 400px 200px at 4% 20%, rgba(255, 223, 0, 0.20) 0%, rgba(255, 215, 0, 0.15) 40%, rgba(255, 255, 0, 0.10) 70%, transparent 85%),
                radial-gradient(ellipse 250px 150px at 2% 50%, rgba(255, 215, 0, 0.18) 0%, rgba(255, 223, 0, 0.12) 50%, transparent 80%),
                /* Cosmic dust clouds - FAR SIDES */
                radial-gradient(ellipse 600px 350px at 5% 25%, rgba(138, 43, 226, 0.08) 0%, transparent 60%),
                radial-gradient(ellipse 550px 300px at 95% 15%, rgba(30, 144, 255, 0.06) 0%, transparent 55%),
                radial-gradient(ellipse 650px 350px at 90% 80%, rgba(255, 20, 147, 0.05) 0%, transparent 65%),
                radial-gradient(ellipse 450px 250px at 8% 75%, rgba(255, 69, 0, 0.04) 0%, transparent 70%);
            pointer-events: none;
            z-index: -10;
            animation: nebulaDrift 60s ease-in-out infinite;
        }

        /* Flowing nebula streams */
        body::after {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: 
                /* CENTER RIFT - DARK GASEOUS VOID */
                radial-gradient(ellipse 300px 100vh at 51% 40%, rgba(0,0,0,0.3) 0%, rgba(0,0,0,0.5) 70%, rgba(0,0,0,0.3) 100%),
                radial-gradient(ellipse 280px 100vh at 49% 60%, rgba(0,0,0,0.2) 0%, rgba(0,0,0,0.4) 80%, rgba(0,0,0,0.2) 100%),
                radial-gradient(ellipse 200px 100vh at 50.5% 30%, rgba(0,0,0,0.1) 0%, rgba(0,0,0,0.3) 90%, rgba(0,0,0,0.1) 100%),
                /* YELLOW SPROUT gas tendrils - REDUCED AND REPOSITIONED */
                conic-gradient(from 120deg at 6% 30%, transparent 0deg, rgba(255, 215, 0, 0.15) 30deg, rgba(255, 255, 0, 0.12) 60deg, rgba(255, 223, 0, 0.10) 90deg, transparent 150deg),
                conic-gradient(from 60deg at 3% 45%, transparent 0deg, rgba(255, 223, 0, 0.12) 40deg, rgba(255, 215, 0, 0.10) 80deg, transparent 120deg),
                linear-gradient(60deg, transparent 0%, rgba(255, 223, 0, 0.10) 12%, rgba(255, 215, 0, 0.15) 30%, transparent 35%),
                /* Flowing gas streams - EXTREME SIDES */
                conic-gradient(from 45deg at 15% 20%, transparent 0deg, rgba(138, 43, 226, 0.06) 60deg, transparent 120deg),
                conic-gradient(from 180deg at 92% 70%, transparent 0deg, rgba(255, 20, 147, 0.05) 90deg, transparent 180deg),
                conic-gradient(from 270deg at 88% 90%, transparent 0deg, rgba(30, 144, 255, 0.04) 45deg, transparent 90deg),
                /* Wispy tendrils - EXTREME EDGES */
                linear-gradient(45deg, transparent 0%, rgba(138, 43, 226, 0.02) 20%, transparent 35%),
                linear-gradient(-45deg, transparent 65%, rgba(30, 144, 255, 0.02) 80%, transparent 100%);
            pointer-events: none;
            z-index: -9;
            animation: nebulaFlow 80s linear infinite;
        }

        @keyframes nebulaDrift {
            0%, 100% { 
                transform: scale(1) rotate(0deg); 
                opacity: 0.8; 
            }
            25% { 
                transform: scale(1.05) rotate(1deg); 
                opacity: 1; 
            }
            50% { 
                transform: scale(0.98) rotate(0deg); 
                opacity: 0.9; 
            }
            75% { 
                transform: scale(1.02) rotate(-1deg); 
                opacity: 0.95; 
            }
        }

        @keyframes nebulaFlow {
            0% { 
                transform: rotate(0deg) scale(1); 
                opacity: 0.6; 
            }
            25% { 
                transform: rotate(90deg) scale(1.1); 
                opacity: 0.8; 
            }
            50% { 
                transform: rotate(180deg) scale(0.95); 
                opacity: 0.7; 
            }
            75% { 
                transform: rotate(270deg) scale(1.05); 
                opacity: 0.9; 
            }
            100% { 
                transform: rotate(360deg) scale(1); 
                opacity: 0.6; 
            }
        }

        a { color: var(--link); text-decoration: none; }
        a:hover { text-decoration: underline; }

        /* Header / Nav - EXACTLY MATCH OTHER PAGES */
        header {
            padding: 24px 0;
            position: sticky;
            top: 0;
            background: rgba(248, 250, 249, 0.95);
            backdrop-filter: blur(10px);
            z-index: 1000;
            border-bottom: 1px solid rgba(152, 229, 142, 0.1);
            box-shadow: 0 2px 20px rgba(0, 107, 64, 0.05);
            font-family: 'Segoe UI', system-ui, -apple-system, sans-serif !important;
        }
        .nav-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            font-family: 'Segoe UI', system-ui, -apple-system, sans-serif !important;
        }
        .logo { display: flex; align-items: center; gap: 12px; }
        .profile-logo { width: 52px; height: 52px; border-radius: 50%; border: 2px solid #98e58e; box-shadow: 0 8px 24px rgba(0,0,0,0.4); object-fit: cover; }
        .logo-text { font-size: 1.5em; font-weight: 700; color: #2d3748; font-family: 'Segoe UI', system-ui, -apple-system, sans-serif !important; }

        .nav-menu { display: flex; list-style: none; gap: 40px; margin: 0; padding: 0; }
        .nav-menu a { color: #2d3748; text-decoration: none; font-weight: 600; font-size: 1.1em; padding: 12px 20px; font-family: 'Segoe UI', system-ui, -apple-system, sans-serif !important; position: relative; transition: all 0.3s ease; border-radius: 8px; }
        .nav-menu a:hover { color: #006b40; background: rgba(152, 229, 142, 0.1); text-decoration: none; transform: translateY(-2px); }
        .nav-menu a.current { color: #006b40; background: rgba(152, 229, 142, 0.15); box-shadow: 0 4px 12px rgba(152, 229, 142, 0.2); }

        .hero {
            position: relative; overflow: hidden;
            background: radial-gradient(1000px 500px at 10% -20%, rgba(20,184,166,0.08), transparent 60%),
                        radial-gradient(800px 300px at 120% 0%, rgba(34,211,238,0.10), transparent 50%),
                        linear-gradient(180deg, rgba(11,11,15,0.9), rgba(11,11,15,0.3));
            z-index: 10;
        }
        .hero-inner { max-width: 1100px; margin: 0 auto; padding: 60px 18px 24px; display: grid; grid-template-columns: 1fr; gap: 22px; }
        .hero h1 { margin: 0; font-size: 28px; letter-spacing: 0.2px; }
        .hero p { margin: 0; color: var(--muted); }
        .hero .cta { margin-top: 14px; }
        .cta a { display: inline-block; padding: 10px 14px; border-radius: 10px; background: rgba(20,184,166,0.15); border: 1px solid rgba(34,211,238,0.25); box-shadow: 0 8px 22px rgba(20,184,166,0.15); }

        /* Projects grid (cards) */
        main { max-width: 1100px; margin: 0 auto; padding: 24px 18px 60px; position: relative; z-index: 60; }
        .project-card { 
            background: linear-gradient(180deg, rgba(17,24,39,0.95), rgba(17,24,39,0.90)); 
            border: 1px solid var(--border); 
            border-radius: 16px; 
            box-shadow: 0 20px 40px rgba(0,0,0,0.5); 
            margin: 16px 0; 
            overflow: hidden; 
            position: relative;
            z-index: 70;
        }
        .project-card h2 { margin: 16px 16px 8px; font-size: 18px; position: relative; z-index: 80; }
        .project-card p { margin: 0 16px 10px; color: var(--muted); position: relative; z-index: 80; }
        .project-card iframe { 
            width: 100%; 
            height: 520px; 
            border: 0; 
            border-top: 1px solid var(--border); 
            background: #0b0b0f; 
            position: relative;
            z-index: 100;
        }

        /* Footer - EXACTLY MATCH OTHER PAGES */
        footer { 
            width: 100%; 
            padding: 40px 0; 
            text-align: center; 
            background: linear-gradient(90deg, #003b2f, #001c44); 
            color: white; 
            font-style: italic; 
            font-size: 1.1em; 
            box-shadow: 0 -4px 20px rgba(0,0,0,0.2); 
            position: relative;
            z-index: 10;
        }
        .footer-inner { max-width: 1100px; margin: 0 auto; padding: 16px 18px; }

        /* Animated background canvas */
        #particle-canvas { 
            position: fixed; 
            inset: 0; 
            z-index: 50; 
            pointer-events: none;
            opacity: 1;
        }
        .floating-nodes, .circuit-lines { position: fixed; inset: 0; pointer-events: none; z-index: 40; }
        
        /* Cluster companion glows - Enhanced intensity */
        .floating-nodes::before { 
            content: ""; 
            position: absolute; 
            width: 200px; 
            height: 200px; 
            right: 18%; 
            top: 15%; 
            background: radial-gradient(circle, rgba(100,149,237,0.18), rgba(135,206,235,0.12) 50%, transparent 80%); 
            filter: blur(20px); 
            animation: clusterGlow 18s ease-in-out infinite;
        }
        
        .floating-nodes::after { 
            content: ""; 
            position: absolute; 
            width: 180px; 
            height: 180px; 
            right: 12%; 
            bottom: 18%; 
            background: radial-gradient(circle, rgba(147,112,219,0.15), rgba(186,85,211,0.10) 60%, transparent 85%); 
            filter: blur(22px); 
            animation: clusterGlow 22s ease-in-out infinite reverse;
        }
        
        .circuit-lines::before { 
            content: ""; 
            position: absolute; 
            width: 150px; 
            height: 150px; 
            left: 8%; 
            top: 35%; 
            background: radial-gradient(circle, rgba(20,184,166,0.12), rgba(72,209,204,0.08) 70%, transparent 90%); 
            filter: blur(18px); 
            animation: nebulaPulse 16s ease-in-out infinite;
        }
        
        .circuit-lines::after { 
            content: ""; 
            position: absolute; 
            width: 240px; 
            height: 240px; 
            left: 45%; 
            top: 60%; 
            background: radial-gradient(circle, rgba(65,105,225,0.10), rgba(123,104,238,0.06) 65%, transparent 85%); 
            filter: blur(28px); 
            animation: deepGalaxy 25s ease-in-out infinite;
        }

        /* Additional cosmic glows - Enhanced intensity + SPROUT YELLOW */
        .hero::before {
            content: '';
            position: absolute;
            width: 160px;
            height: 160px;
            right: 35%;
            bottom: 10%;
            background: radial-gradient(circle, rgba(255,182,193,0.12), rgba(255,105,180,0.08) 60%, transparent 80%);
            filter: blur(25px);
            animation: cosmicBreath 20s ease-in-out infinite;
            z-index: 1;
        }

        .hero::after {
            content: '';
            position: absolute;
            width: 220px;
            height: 220px;
            left: 3%;
            top: 25%;
            background: radial-gradient(circle, rgba(255,215,0,0.45) 0%, rgba(255,255,0,0.35) 30%, rgba(255,223,0,0.25) 50%, rgba(255,215,0,0.18) 70%, rgba(255,223,0,0.10) 85%, transparent 95%);
            filter: blur(12px);
            animation: sproutGlow 24s ease-in-out infinite;
            z-index: 1;
        }

        /* Additional left edge yellow boost */
        main::after {
            content: '';
            position: absolute;
            width: 160px;
            height: 300px;
            left: 2%;
            top: 10%;
            background: radial-gradient(ellipse, rgba(255,215,0,0.25) 0%, rgba(255,223,0,0.15) 40%, rgba(255,255,0,0.08) 70%, transparent 90%);
            filter: blur(18px);
            animation: leftEdgeGlow 20s ease-in-out infinite;
            z-index: 1;
        }

        /* CENTER RIFT NODES - Only nodes allowed in the center */
        .center-rift-nodes {
            position: fixed;
            inset: 0;
            pointer-events: none;
            z-index: 55;
        }

        .center-rift-nodes::before {
            content: '';
            position: absolute;
            width: 4px;
            height: 4px;
            left: 50%;
            top: 25%;
            background: radial-gradient(circle, rgba(255,255,255,0.95), rgba(200,200,255,0.7) 70%, transparent);
            border-radius: 50%;
            box-shadow: 
                0 0 15px rgba(255,255,255,0.9),
                0 0 30px rgba(200,200,255,0.6),
                0 0 45px rgba(200,200,255,0.4);
            animation: riftNodePulse 10s ease-in-out infinite;
            transform: translateX(-50%);
        }

        .center-rift-nodes::after {
            content: '';
            position: absolute;
            width: 3px;
            height: 3px;
            left: 50%;
            top: 65%;
            background: radial-gradient(circle, rgba(255,255,255,0.9), rgba(180,180,255,0.6) 60%, transparent);
            border-radius: 50%;
            box-shadow: 
                0 0 12px rgba(255,255,255,0.8),
                0 0 24px rgba(180,180,255,0.5),
                0 0 36px rgba(180,180,255,0.3);
            animation: riftNodePulse 14s ease-in-out infinite reverse;
            transform: translateX(-50%);
        }

        @keyframes riftNodePulse {
            0%, 100% { 
                opacity: 0.8; 
                transform: translateX(-50%) scale(1); 
            }
            50% { 
                opacity: 1; 
                transform: translateX(-50%) scale(1.5); 
            }
        }

        main::before {
            content: '';
            position: absolute;
            width: 120px;
            height: 120px;
            left: 15%;
            bottom: 25%;
            background: radial-gradient(circle, rgba(50,205,50,0.10), rgba(144,238,144,0.06) 70%, transparent 85%);
            filter: blur(15px);
            animation: stellarWind 14s ease-in-out infinite;
            z-index: 1;
        }

        @keyframes sproutGlow {
            0%, 100% { 
                opacity: 0.4; 
                transform: scale(1) rotate(0deg); 
            }
            25% { 
                opacity: 0.7; 
                transform: scale(1.15) rotate(90deg); 
            }
            50% { 
                opacity: 0.6; 
                transform: scale(0.95) rotate(180deg); 
            }
            75% { 
                opacity: 0.8; 
                transform: scale(1.08) rotate(270deg); 
            }
        }

        /* NEW LAYER: Nebula-embedded stationary nodes */
        .nebula-nodes {
            position: fixed;
            inset: 0;
            pointer-events: none;
            z-index: 45;
        }

        .nebula-nodes::before {
            content: '';
            position: absolute;
            width: 8px;
            height: 8px;
            left: 25%;
            top: 20%;
            background: radial-gradient(circle, rgba(255,255,255,0.9), rgba(138,43,226,0.6) 70%, transparent);
            border-radius: 50%;
            box-shadow: 
                0 0 20px rgba(255,255,255,0.8),
                0 0 40px rgba(138,43,226,0.5),
                0 0 60px rgba(138,43,226,0.3);
            animation: nebulaNodePulse 12s ease-in-out infinite;
        }

        .nebula-nodes::after {
            content: '';
            position: absolute;
            width: 6px;
            height: 6px;
            right: 30%;
            top: 45%;
            background: radial-gradient(circle, rgba(255,255,255,0.8), rgba(255,20,147,0.7) 65%, transparent);
            border-radius: 50%;
            box-shadow: 
                0 0 15px rgba(255,255,255,0.7),
                0 0 30px rgba(255,20,147,0.6),
                0 0 45px rgba(255,20,147,0.4);
            animation: nebulaNodePulse 15s ease-in-out infinite reverse;
        }

        /* Additional embedded nodes using a new container */
        .deep-space-nodes {
            position: fixed;
            inset: 0;
            pointer-events: none;
            z-index: 48;
        }

        .deep-space-nodes::before {
            content: '';
            position: absolute;
            width: 5px;
            height: 5px;
            left: 70%;
            top: 65%;
            background: radial-gradient(circle, rgba(255,255,255,0.85), rgba(30,144,255,0.6) 60%, transparent);
            border-radius: 50%;
            box-shadow: 
                0 0 12px rgba(255,255,255,0.6),
                0 0 25px rgba(30,144,255,0.5),
                0 0 40px rgba(30,144,255,0.3);
            animation: deepNodeGlow 18s ease-in-out infinite;
        }

        .deep-space-nodes::after {
            content: '';
            position: absolute;
            width: 7px;
            height: 7px;
            left: 15%;
            bottom: 35%;
            background: radial-gradient(circle, rgba(255,255,255,0.9), rgba(255,69,0,0.7) 70%, transparent);
            border-radius: 50%;
            box-shadow: 
                0 0 18px rgba(255,255,255,0.7),
                0 0 35px rgba(255,69,0,0.6),
                0 0 50px rgba(255,69,0,0.4);
            animation: deepNodeGlow 20s ease-in-out infinite reverse;
        }

        @keyframes nebulaNodePulse {
            0%, 100% { 
                opacity: 0.7; 
                transform: scale(1); 
                filter: brightness(1);
            }
            33% { 
                opacity: 1; 
                transform: scale(1.4); 
                filter: brightness(1.3);
            }
            66% { 
                opacity: 0.8; 
                transform: scale(0.9); 
                filter: brightness(0.9);
            }
        }

        @keyframes deepNodeGlow {
            0%, 100% { 
                opacity: 0.6; 
                transform: scale(1) rotate(0deg); 
                filter: brightness(1) hue-rotate(0deg);
            }
            25% { 
                opacity: 0.9; 
                transform: scale(1.2) rotate(90deg); 
                filter: brightness(1.2) hue-rotate(30deg);
            }
            50% { 
                opacity: 0.8; 
                transform: scale(1.1) rotate(180deg); 
                filter: brightness(1.1) hue-rotate(60deg);
            }
            75% { 
                opacity: 1; 
                transform: scale(1.3) rotate(270deg); 
                filter: brightness(1.3) hue-rotate(90deg);
            }
        }

        @keyframes clusterGlow {
            0%, 100% { 
                opacity: 0.7; 
                transform: scale(1) rotate(0deg); 
            }
            33% { 
                opacity: 1.0; 
                transform: scale(1.15) rotate(120deg); 
            }
            66% { 
                opacity: 0.8; 
                transform: scale(0.95) rotate(240deg); 
            }
        }

        @keyframes nebulaPulse {
            0%, 100% { 
                opacity: 0.6; 
                transform: scale(1); 
            }
            50% { 
                opacity: 0.9; 
                transform: scale(1.2); 
            }
        }

        @keyframes deepGalaxy {
            0%, 100% { 
                opacity: 0.5; 
                transform: scale(1) rotate(0deg); 
            }
            25% { 
                opacity: 0.8; 
                transform: scale(1.1) rotate(90deg); 
            }
            50% { 
                opacity: 0.7; 
                transform: scale(0.9) rotate(180deg); 
            }
            75% { 
                opacity: 0.9; 
                transform: scale(1.05) rotate(270deg); 
            }
        }

        @keyframes cosmicBreath {
            0%, 100% { 
                opacity: 0.4; 
                transform: scale(1); 
            }
            50% { 
                opacity: 0.8; 
                transform: scale(1.3); 
            }
        }

        @keyframes stellarWind {
            0%, 100% { 
                opacity: 0.5; 
                transform: scale(1) translateX(0); 
            }
            50% { 
                opacity: 0.7; 
                transform: scale(1.1) translateX(20px); 
            }
        }

        /* Responsive */
        @media (max-width: 740px){ .project-card iframe { height: 460px; } }
        @media (max-width: 768px) { .nav-menu { display: none; } }
</style>
</head>
<body>
<canvas id="particle-canvas"></canvas>
<div class="floating-nodes"></div>
<div class="circuit-lines"></div>

<!-- Header - EXACTLY MATCH OTHER PAGES -->
<header class="header" role="banner">
    <nav aria-label="Main navigation" class="nav-container" role="navigation">
        <div class="logo">
            <img alt="Kyle Mohney Professional Photo" class="profile-logo" height="52" src="assets/kyle.png" width="52"/>
            <span class="logo-text">Kyle Mohney</span>
        </div>
        <ul class="nav-menu">
            <li><a href="index.html">Home</a></li>
            <li><a href="resume.html">Resume</a></li>
            <li><a href="about.html">About</a></li>
            <li><a class="current" href="projects.html" aria-current="page">Projects</a></li>
            <li><a href="articles.html">Articles</a></li>
            <li><a href="contact.html">Contact</a></li>
        </ul>
    </nav>
</header>

<div class="hero">
    <div class="hero-inner">
        <div>
            <h1>Interactive Demos &amp; Sandbox</h1>
            <p>Mini projects to showcase UI, graphics, and automation.</p>
            <div class="cta"><a href="#projects">Jump to projects ↓</a></div>
        </div>
    </div>
</div>

<div class="floating-nodes"></div>
<div class="circuit-lines"></div>

<main>
    <section class="project-card">
        <h2>Interactive HTML Game</h2>
        <p>A browser-based game demonstrating interactive UI elements and responsive design principles.</p>
        <iframe src="your-game.html" title="HTML Game Demo"></iframe>
    </section>
    <section class="project-card">
        <h2>Media Visualizer</h2>
        <p>Real-time audio and visual effects showcasing dynamic data visualization and creative coding techniques.</p>
        <iframe src="my-visualizer.html" title="Media Visualizer"></iframe>
    </section>
    <section class="project-card">
        <h2>Slideshow / Documents</h2>
        <p>Interactive presentation system with smooth transitions and document management capabilities.</p>
        <iframe src="your-slideshow.html" title="Document Slideshow"></iframe>
    </section>
</main>

<!-- Footer - EXACTLY MATCH OTHER PAGES -->
<footer>
    "The best way to predict the future is to invent it." — Alan Kay
</footer>

<script>
// ULTIMATE PARTICLE SYSTEM - Orbital clusters + radiation
const canvas = document.getElementById('particle-canvas');
const ctx = canvas.getContext('2d');
let stars = [];
let particleCluster = null;
let radiationParticles = [];

function resizeCanvas(){
    canvas.width = window.innerWidth; 
    canvas.height = window.innerHeight;
    console.log('Canvas resized:', canvas.width, canvas.height);
    
    // Re-initialize everything when canvas resizes
    if (canvas.width > 0 && canvas.height > 0) {
        initStars();
        initParticleCluster();
        initRadiationParticles();
    }
}

window.addEventListener('resize', resizeCanvas, { passive: true });

// ORBITAL PARTICLE CLUSTER
function initParticleCluster() {
    if (!canvas.width || !canvas.height) return;
    
    particleCluster = {
        centerX: canvas.width * 0.2,
        centerY: -50, // Start above screen
        targetY: canvas.height + 100, // End below screen
        speed: 0.3, // Slow vertical drift
        particles: []
    };
    
    // Create 8-12 particles in the cluster
    const particleCount = Math.floor(Math.random() * 5) + 8;
    for (let i = 0; i < particleCount; i++) {
        particleCluster.particles.push({
            angle: (Math.PI * 2 * i) / particleCount,
            orbitRadius: Math.random() * 40 + 20,
            orbitSpeed: (Math.random() - 0.5) * 0.02,
            size: Math.random() * 2 + 1,
            alpha: Math.random() * 0.4 + 0.6,
            twinkle: Math.random() * 0.02 + 0.01,
            color: Math.random() > 0.7 ? 'cosmic' : 'white'
        });
    }
}

// RADIATION PARTICLES
function initRadiationParticles() {
    if (!canvas.width || !canvas.height) return;
    
    radiationParticles = [];
    const count = 15;
    
    for (let i = 0; i < count; i++) {
        radiationParticles.push({
            x: Math.random() * canvas.width,
            y: Math.random() * canvas.height,
            dx: (Math.random() - 0.5) * 1.5,
            dy: (Math.random() - 0.5) * 1.5,
            size: Math.random() * 1.5 + 0.5,
            alpha: Math.random() * 0.6 + 0.2,
            twinkle: Math.random() * 0.03 + 0.01,
            life: Math.random() * 1000 + 500,
            maxLife: Math.random() * 1000 + 500
        });
    }
}

function initStars(){
    if (!canvas.width || !canvas.height) {
        console.log('Canvas not ready, skipping star init');
        return;
    }
    
    const count = Math.min(120, Math.floor((canvas.width * canvas.height) / 15000));
    console.log('Initializing stars:', count);
    
    stars = [];
    
    // Create guaranteed sexy clusters in specific regions
    const guaranteedClusters = [
        {
            centerX: canvas.width * 0.75 + (Math.random() - 0.5) * 100,
            centerY: canvas.height * 0.25 + (Math.random() - 0.5) * 80,
            radius: Math.random() * 60 + 70,
            density: Math.random() * 4 + 8
        },
        {
            centerX: canvas.width * 0.8 + (Math.random() - 0.5) * 120,
            centerY: canvas.height * 0.75 + (Math.random() - 0.5) * 100,
            radius: Math.random() * 80 + 60,
            density: Math.random() * 5 + 7
        }
    ];
    
    const randomClusterCount = Math.floor((count * 0.4) / 8) - 2;
    const additionalClusters = Array.from({ length: Math.max(0, randomClusterCount) }, () => ({
        centerX: Math.random() * canvas.width,
        centerY: Math.random() * canvas.height,
        radius: Math.random() * 80 + 40,
        density: Math.random() * 6 + 4
    }));
    
    const allClusters = [...guaranteedClusters, ...additionalClusters];
    
    // Create clustered stars
    allClusters.forEach((cluster, index) => {
        const starsInCluster = Math.floor(cluster.density);
        const isSexyCluster = index < 2;
        
        for (let i = 0; i < starsInCluster; i++) {
            const angle = Math.random() * Math.PI * 2;
            const distance = Math.random() * cluster.radius;
            const x = cluster.centerX + Math.cos(angle) * distance;
            const y = cluster.centerY + Math.sin(angle) * distance;
            
            if (x >= 0 && x <= canvas.width && y >= 0 && y <= canvas.height) {
                stars.push({
                    x: x,
                    y: y,
                    radius: isSexyCluster ? 
                        Math.random() * 1.8 + 0.4 :
                        Math.random() * 1.5 + 0.2,
                    baseAlpha: isSexyCluster ? 
                        Math.random() * 0.4 + 0.5 :
                        Math.random() * 0.5 + 0.4,
                    pulseSpeed: Math.random() * 0.002 + 0.0005,
                    pulseOffset: Math.random() * Math.PI * 2,
                    twinkleSpeed: Math.random() * 0.001 + 0.0002,
                    clustered: true,
                    sexyCluster: isSexyCluster
                });
            }
        }
    });
    
    // Create solo stars
    const soloCount = count - stars.length;
    for (let i = 0; i < soloCount; i++) {
        stars.push({
            x: Math.random() * canvas.width,
            y: Math.random() * canvas.height,
            radius: Math.random() * 2 + 0.3,
            baseAlpha: Math.random() * 0.4 + 0.3,
            pulseSpeed: Math.random() * 0.002 + 0.0005,
            pulseOffset: Math.random() * Math.PI * 2,
            twinkleSpeed: Math.random() * 0.001 + 0.0002,
            clustered: false,
            sexyCluster: false
        });
    }
    
    console.log('Stars created:', stars.length, 'with 2 guaranteed sexy clusters');
}

function drawStars(){
    const time = Date.now();
    
    stars.forEach((star) => {
        const pulse = Math.sin(time * star.pulseSpeed + star.pulseOffset) * 0.3;
        const twinkle = Math.sin(time * star.twinkleSpeed) * 0.1;
        const alpha = Math.max(0.1, Math.min(0.9, star.baseAlpha + pulse + twinkle));
        const currentRadius = star.radius + pulse * 0.2;
        
        // Main star
        ctx.beginPath();
        ctx.fillStyle = `rgba(255,255,255,${alpha})`;
        ctx.arc(star.x, star.y, currentRadius, 0, Math.PI * 2);
        ctx.fill();
        
        // Special effects for sexy clusters
        if (star.sexyCluster) {
            ctx.beginPath();
            ctx.fillStyle = `rgba(200,220,255,${alpha * 0.5})`;
            ctx.arc(star.x, star.y, currentRadius * 3, 0, Math.PI * 2);
            ctx.fill();
            
            if (star.radius > 1.5) {
                ctx.beginPath();
                ctx.fillStyle = `rgba(148,163,184,${alpha * 0.3})`;
                ctx.arc(star.x, star.y, currentRadius * 6, 0, Math.PI * 2);
                ctx.fill();
            }
        }
        else if (star.clustered && star.radius > 1.0) {
            ctx.beginPath();
            ctx.fillStyle = `rgba(200,220,255,${alpha * 0.4})`;
            ctx.arc(star.x, star.y, currentRadius * 2.5, 0, Math.PI * 2);
            ctx.fill();
        }
        else if (!star.clustered && star.radius > 1.5) {
            ctx.beginPath();
            ctx.fillStyle = `rgba(200,220,255,${alpha * 0.3})`;
            ctx.arc(star.x, star.y, currentRadius * 3, 0, Math.PI * 2);
            ctx.fill();
        }
        
        if (star.radius > 1.8) {
            ctx.beginPath();
            ctx.fillStyle = `rgba(148,163,184,${alpha * 0.2})`;
            ctx.arc(star.x, star.y, currentRadius * 5, 0, Math.PI * 2);
            ctx.fill();
        }
    });
}

function updateParticleCluster() {
    if (!particleCluster) return;
    
    const time = Date.now();
    
    // Move cluster down the page
    particleCluster.centerY += particleCluster.speed;
    
    // Reset cluster when it goes off screen
    if (particleCluster.centerY > canvas.height + 100) {
        initParticleCluster();
        return;
    }
    
    // Update each particle in the cluster
    particleCluster.particles.forEach(particle => {
        // Update orbital position
        particle.angle += particle.orbitSpeed;
        
        // Calculate position relative to cluster center
        const x = particleCluster.centerX + Math.cos(particle.angle) * particle.orbitRadius;
        const y = particleCluster.centerY + Math.sin(particle.angle) * particle.orbitRadius;
        
        // Add orbital wobble
        const wobble = Math.sin(time * 0.001 + particle.angle) * 5;
        
        // Twinkle effect
        particle.alpha += (Math.random() - 0.5) * particle.twinkle;
        particle.alpha = Math.max(0.3, Math.min(1.0, particle.alpha));
        
        // Draw particle
        ctx.beginPath();
        if (particle.color === 'cosmic') {
            ctx.fillStyle = `rgba(152,229,142,${particle.alpha})`;
        } else {
            ctx.fillStyle = `rgba(255,255,255,${particle.alpha})`;
        }
        ctx.arc(x + wobble, y + wobble, particle.size, 0, Math.PI * 2);
        ctx.fill();
        
        // Particle glow
        ctx.beginPath();
        if (particle.color === 'cosmic') {
            ctx.fillStyle = `rgba(152,229,142,${particle.alpha * 0.3})`;
        } else {
            ctx.fillStyle = `rgba(200,220,255,${particle.alpha * 0.3})`;
        }
        ctx.arc(x + wobble, y + wobble, particle.size * 3, 0, Math.PI * 2);
        ctx.fill();
    });
}

function updateRadiationParticles() {
    const time = Date.now();
    
    radiationParticles.forEach((particle, index) => {
        // Move particle
        particle.x += particle.dx;
        particle.y += particle.dy;
        
        // Boundary bouncing
        if (particle.x < 0 || particle.x > canvas.width) particle.dx *= -1;
        if (particle.y < 0 || particle.y > canvas.height) particle.dy *= -1;
        
        // Life cycle
        particle.life--;
        const lifeRatio = particle.life / particle.maxLife;
        
        // Fade out as life decreases
        const alpha = Math.min(particle.alpha, lifeRatio);
        
        // Twinkle effect
        const twinkle = Math.sin(time * 0.002 + index) * 0.2;
        const finalAlpha = Math.max(0, Math.min(1, alpha + twinkle));
        
        // Draw radiation particle
        ctx.beginPath();
        ctx.fillStyle = `rgba(255,255,255,${finalAlpha})`;
        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        ctx.fill();
        
        // Subtle glow
        ctx.beginPath();
        ctx.fillStyle = `rgba(255,255,255,${finalAlpha * 0.2})`;
        ctx.arc(particle.x, particle.y, particle.size * 2, 0, Math.PI * 2);
        ctx.fill();
        
        // Respawn particle when it dies
        if (particle.life <= 0) {
            particle.x = Math.random() * canvas.width;
            particle.y = Math.random() * canvas.height;
            particle.dx = (Math.random() - 0.5) * 1.5;
            particle.dy = (Math.random() - 0.5) * 1.5;
            particle.life = particle.maxLife;
            particle.alpha = Math.random() * 0.6 + 0.2;
        }
    });
}

function drawAllParticles(){
    if (!canvas || !ctx) {
        requestAnimationFrame(drawAllParticles);
        return;
    }
    
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // Draw background stars
    drawStars();
    
    // Draw orbital particle cluster
    updateParticleCluster();
    
    // Draw radiation particles
    updateRadiationParticles();
    
    requestAnimationFrame(drawAllParticles);
}

// Initialize on DOM ready
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, initializing ultimate particle system');
    resizeCanvas();
    drawAllParticles();
});

// Also try immediate initialization
setTimeout(() => {
    console.log('Timeout ultimate particle initialization');
    resizeCanvas();
}, 100);

console.log('ULTIMATE PARTICLE SYSTEM ACTIVATED');
</script>
</body>
</html>